#!/usr/bin/env python

from __future__ import print_function

"""
Script to be run by the postgres UNIX user. This script creates a "runasroot.sh" that 
must be run by root to write an init.d script to /etc/init.d/
"""

import sys
import os
import os.path
import argparse


if __name__ == "__main__":
    ap = argparse.ArgumentParser(description='Bluestone Deploy pg_monitor Init Script Tool.')
    ap.add_argument( '-c', '--configfile', help='Specify the location of the config file.', default='/var/lib/postgresql/repmgr/pgmon.conf' )
    args = ap.parse_args()
    
    
    cwd = os.getcwd()

    if not(os.path.isfile( os.path.join( cwd, "README.md" ) )):
        print( "deploy-pgmon-init-scripts should be run from the pg_monitor git checkout directory. README.md doesn't exist in the cwd=%s!" % cwd )
        sys.exit(1)
        
                       

    # 1) Create a start.sh script in the pg_monitor directory. Assume the pg_monitor dir is the current working dir. Starts a screen session and executes the run.sh script.

    # 2) Create a run.sh script (sources the pyve environment) and run pg_monitor

    startFile = os.path.join( cwd, "start.sh" )
    runFile = os.path.join( cwd, "run.sh" )
    initFile = os.path.join( './generated-init-script', 'pgmonitor' )
    activatePyve = os.path.join( sys.prefix, "bin", "activate" )
    runasrootFile = os.path.join( './generated-init-script', 'runasroot.sh' )

    if not(os.path.isfile(activatePyve)):
    
        print( "[Fail] Unable to find activate script for the pgmon python virtual environment. Looking here %s" % activatePyve )
        print( "  please source the python virtual environment and then rerun this script!" )
        sys.exit(1)

    if not(os.path.isfile(args.configfile)):
        print( "[Warning] Unable to find configfile=%s" % args.configfile )
        sys.exit(1)

    if not(os.path.isfile( startFile)):
        with open( startFile, "w" ) as outf:
           outf.write(
"""
#!/bin/bash

screen -A -m -d -S pgmon %s
screen -ls
""" % (runFile) )
        print("[Info] Created %s" % startFile)

    if not(os.path.isfile( runFile )):
        with open( runFile, "w") as outf:
           outf.write(
"""
#!/bin/bash

# Source the python virtual env
. %s

export PGMON_PID=%s/pg_monitor.pid

if [ -f /etc/sysconfig/pgmonitor ] ; then
  . /etc/sysconfig/pgmonitor
fi;

# Run the pg_monitor script, which should be on the path from the python virtual environment.
pg_monitor --configfile %s
                     """ % (activatePyve, cwd, args.configfile) )
        print("[Info] Created %s" % runFile)

    # 3) Create a /etc/init.d/pgmonitor script as a convenient way to start and stop the script.
    if not( os.path.isfile( initFile ) ):
        os.makedirs( "./generated-init-script" )
        with open(initFile, "w") as outf:
            outf.write( 
"""
#!/bin/bash

######################################################################
# pg_monitor
######################################################################
# Init script to start the pg_monitor script on the slave node to monitor
#  the health of the PG cluster health.
#

### BEGIN INIT INFO
# Provides:  pg_monitor
# Default-Start: 3 4 5
# Default-Stop:  0 1 6
# Short-Description: Service to Monitor PG Cluster Health
### END INIT INFO

method=$1
OWNER=postgres

# For SELinux we need to use 'runuser' not 'su'                                        
if [ -x /sbin/runuser ]
then
    SU=runuser
else
    SU=su
fi

PGMON_HOME=%s
export PGMON_PID=$PGMON_HOME/pg_monitor.pid
script=$PGMON_HOME/start.sh

if [ -f /etc/sysconfig/pgmonitor ] ; then
  . /etc/sysconfig/pgmonitor
fi;


case $method in
restart)
  $0 stop
  $0 start
  ;;

start)
  chown -R $OWNER $PGMON_HOME
  $SU -m -l $OWNER -c $script
  ;;

stop)
  if [ -f $PGMON_PID ] ; then
    kill $( cat $PGMON_PID )
    sleep 2
    if [ -f $PGMON_PID ] ; then
      kill -9 $( cat $PGMON_PID )
      rm -f $PGMON_PID
    fi;
  fi;
  ;;

status)
  screen -ls
  if [ -f $PGMON_PID ] ; then
     ps -ef | grep $( cat $PGMON_PID )
  fi;
  ;;

esac
""" % cwd )

        print("[Info] Created %s" % initFile)

    if not( os.path.isfile( runasrootFile ) ):
        with open(runasrootFile, "w") as outf:
            outf.write(
"""
#!/bin/bash

######################################################################
# pg_monitor run as root script
######################################################################
# Run this script as root to finish the installation of the pg_monitor
#  utility. Execute this on the primary slave node.
#

chmod +x pgmonitor
cp pgmonitor /etc/init.d/

echo "To start the monitor exeucte '/etc/init.d/pgmonitor' as root on the slave node."

""")

        print("[Info] Created %s" % runasrootFile)

    if not( os.path.isfile( "/etc/init.d/pgmonitor" ) ):
        print("[Info] To complete the install, please, have the root user execute the %s script." % runasrootFile)

    os.chmod( runasrootFile, 0755 )
    os.chmod( startFile, 0755 )
    os.chmod( runFile, 0755 )
    os.chmod( initFile, 0755 )
    
        



